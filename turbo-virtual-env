#!/usr/bin/env bash

# turbo-virtual-env
# =================
# A script to install LuaJIT and Turbo together in a self contained directory #

# I know it's corny that this is a shell script and not written in Lua,
# but the upside is that the user won't have to have Lua or LuaJIT
# installed already.

LUAJIT_GITVERSION="2.0"
LUAJIT_GIT_URL="http://luajit.org/git/luajit-$LUAJIT_GITVERSION.git"
LUAROCKS_GIT_URL="https://github.com/keplerproject/luarocks.git"
TURBO_GIT_URL="https://github.com/kernelsauce/turbo.git"


usage(){
	echo -e "\
** turbo-virtual-env **

Usage: turbo-virtual-env -c/--create PATH_TO_ENV_DIR 
                         [--turbo-dev PATH_TO_TURBO_SOURCE_DIR]
                         [-r/--luarocks-requirements PATH_TO_LUAROCKS_REQUIREMENTS_FILE]

Example Usage:
  \$ cd /path/to/my/project
  \$ turbo-virtual-env --create ./env
  \$ source ./env/bin/activate

Example Usage (turbo development mode):
  \$ cd /some/dir
  \$ turbo-virtual-env --create ./env --turbo-dev /path/to/my/turbo

Description:
  A script to install LuaJIT and Turbo together in an 'isolated' environment,
  inspired by the virtual-env tool for Python.
  - Clones, builds and installs LuaJIT and Turbo
  - Creates a source-able 'activate' script in DIR_SUPPLIED_ON_COMMAND_LINE/bin/activate

Issues:	github.com/enotodden/turbo-virtual-env/issues
Source: github.com/entoodden/turbo-virtual-env
License: MIT"
}


luajit_full_version(){
    LUAJIT_DIR="$ENVDIR/src/luajit-$LUAJIT_GITVERSION"
    LUAJIT_MAJVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^majver' | sed 's/majver\s*=\s*//g'`
    LUAJIT_MINVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^minver' | sed 's/minver\s*=\s*//g'`
    LUAJIT_RELVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^relver' | sed 's/relver\s*=\s*//g'`
    echo "$LUAJIT_MAJVER.$LUAJIT_MINVER.$LUAJIT_RELVER"
}


install_luarocks(){
    LUAROCKS_DIR=$ENVDIR/src/luarocks
    git clone $LUAROCKS_GIT_URL $LUAROCKS_DIR
    $LUAROCKS_DIR/configure --prefix=$ENVDIR --force-config --with-lua=$ENVDIR --with-lua-include=$ENVDIR/include/luajit-$LUAJIT_GITVERSION
    mv config.unix $LUAROCKS_DIR
    make -C $LUAROCKS_DIR build
    make -C $LUAROCKS_DIR install
}


install_luajit(){
    LUAJIT_DIR="$ENVDIR/src/luajit-$LUAJIT_GITVERSION"
    echo "turbo-virtual-env: Cloning LuaJIT from $LUAJIT_GIT_URL to $LUAJIT_DIR"
    git clone $LUAJIT_GIT_URL $LUAJIT_DIR
    echo "turbo-virtual-env: Building LuaJIT"
    make -C $LUAJIT_DIR PREFIX=$ENVDIR
    echo "turbo-virtual-env: Installing LuaJIT to $ENVDIR"
    make -C $LUAJIT_DIR install PREFIX=$ENVDIR
    ln -s $ENVDIR/bin/luajit-`luajit_full_version` $ENVDIR/bin/lua
}


install_turbo(){
    TURBO_DIR="$ENVDIR/src/turbo"
    LUAJIT_VERSION=`luajit_full_version`
    echo "turbo-virtual-env: Cloning turbo from $TURBO_GIT_URL to $TURBO_DIR"
    git clone $TURBO_GIT_URL $TURBO_DIR
    echo "turbo-virtual-env: Building Turbo"
    make -C $TURBO_DIR PREFIX=$ENVDIR LUAJIT_VERSION=$LUAJIT_VERSION
    echo "turbo-virtual-env: Installing turbo to $ENVDIR"
    make -C $TURBO_DIR install PREFIX=$ENVDIR LUAJIT_VERSION=$LUAJIT_VERSION
}


install_turbo_dev(){
    TURBO_DIR=$TURBO_DEV
    LUAJIT_VERSION=`luajit_full_version`
    echo "turbo-virtual-env: Linking existing turbo srcdir to $ENVDIR/src/turbo"
    ln -s $TURBO_DEV $ENVDIR/src/turbo
    echo "turbo-virtual-env: Building Turbo"
    make -C $TURBO_DIR PREFIX=$ENVDIR LUAJIT_VERSION=$LUAJIT_VERSION
    echo "turbo-virtual-env: linking turbo files"
    ln -s $TURBO_DIR/turbo.lua $ENVDIR/share/luajit-$LUAJIT_VERSION/turbo.lua
    ln -s $TURBO_DIR/turbo $ENVDIR/share/luajit-$LUAJIT_VERSION/turbo
}


install_luarocks_requirements() {
    echo "turbo-virtual-env: Installing luarocks from $LUAROCKS_REQUIREMENTS_FILE"
    source $ENVDIR/bin/activate
    for line in `cat $LUAROCKS_REQUIREMENTS_FILE`; do
        luarocks install $line
    done
}


write_activate_script(){
    echo "turbo-virtual-env: Writing activation script to $ENVDIR/bin/activate"
    echo -e "

    export TURBO_VIRTUAL_ENV=\"$ENVDIR\"
    export PATH=\"\$TURBO_VIRTUAL_ENV/bin:\$TURBO_VIRTUAL_ENV/lib:$PATH\"
    export TURBO_VIRTUAL_ENV_OLD_PATH=\"$PATH\"
    export LD_LIBRARY_PATH=\$TURBO_VIRTUAL_ENV/lib:\$TURBO_VIRTUAL_ENV/lib/lua/5.1:$LD_LIBRARY_PATH
    export TURBO_VIRTUAL_ENV_OLD_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"

    deactivate() {
        export PATH=\$TURBO_VIRTUAL_ENV_OLD_PATH
        export LD_LIBRARY_PATH=\$TURBO_VIRTUAL_ENV_OLD_LD_LIBRARY_PATH
        unset TURBO_VIRTUAL_ENV
        if [ ! -z \$TURBO_VIRTUAL_ENV_OLD_PROMPT ]; then
            export PS1=\"\$TURBO_VIRTUAL_ENV_OLD_PROMPT\"
        fi
    }

    export TURBO_VIRTUAL_ENV_OLD_PROMPT=\"\$PS1\";
    if [ -z \"\$TURBO_VIRTUAL_ENV_DISABLE_PROMPT\" ] ; then
        export PS1=\"[tvenv]\$PS1\";
    fi


    alias lua=\"luajit-2.0.2\"
    " > $ENVDIR/bin/activate
}


create(){

    if [ -d $ENVDIR ]; then 
        if [ ! -f "$ENVDIR/.turbo-virtual-env" ]; then
            echo "Directory '$ENVDIR' already exists and is not a turbo-virtual-env directory."
            exit 1
        fi
    fi

    echo "turbo-virtual-env: Creating directories"
    mkdir -p "$ENVDIR/bin"
    mkdir -p "$ENVDIR/src"

    touch "$ENVDIR/.turbo-virtual-env"

    write_activate_script

    install_luajit
    install_luarocks

    if [ -f "$ENVDIR/.turbo-virtual-env-turbo-dev" ]; then
        $TURBO_DEV=`cat $ENVDIR/turbo-virtual-env-turbo-dev`
    fi

    if [ -z $TURBO_DEV ]; then
        install_turbo
    else
        install_turbo_dev
        echo $TURBO_DEV > $ENVDIR/turbo-virtual-env-turbo-dev
    fi

    if [ ! -z "$LUAROCKS_REQUIREMENTS_FILE" ]; then
        install_luarocks_requirements
    fi

    echo "turbo-virtual-env: All done, please source $ENVDIR/bin/activate"
}

ARGS=`getopt -o "hc:d:r:" -l "help,create:,turbo-dev:,luarocks-requirements:" -n "turbo-virtual-env" -- "$@"`
eval set -- "$ARGS"

ACTION=""

while true; do
    case "$1" in
        -h|--help)
            usage
            exit
            shift;;
        -d|--turbo-dev)
            TURBO_DEV=`readlink -f "$2"`
            shift 2;;
        -r|--luarocks-requirements)
            LUAROCKS_REQUIREMENTS_FILE=`readlink -f "$2"`
            shift 2;;
        -c|--create)
            ENVDIR=`readlink -f "$2"`
            ACTION="create"
            shift 2;;
        --)
            shift
            break;;
    esac
done

if [ "$ACTION" = "create" ]; then
    create
else
    usage
fi
